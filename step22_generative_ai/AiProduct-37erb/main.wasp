app AiProduct {
  wasp: {
    version: "^0.11.1"
  },
  title: "AiProduct",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int       @id @default(autoincrement())
    username String    @unique
    password String
    products Product[]
psl=}

entity Product {=psl
    id          Int    @id @default(autoincrement())
    name        String
    description String
    price       Float
    category    String
    brand       String
    image       String
    user        User   @relation(fields: [userId], references: [id])
    userId      Int
psl=}

action createProduct {
  fn: import { createProduct } from "@server/actions.js",
  entities: [Product]
}

action updateProduct {
  fn: import { updateProduct } from "@server/actions.js",
  entities: [Product]
}

action deleteProduct {
  fn: import { deleteProduct } from "@server/actions.js",
  entities: [Product]
}

query getProduct {
  fn: import { getProduct } from "@server/queries.js",
  entities: [Product]
}

query getProducts {
  fn: import { getProducts } from "@server/queries.js",
  entities: [Product]
}

route ProductRoute { path: "/product", to: ProductPage }
page ProductPage {
  component: import { ProductPage } from "@client/pages/Product.jsx",
  authRequired: true
}